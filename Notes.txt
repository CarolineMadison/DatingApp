BACKEND SETUP STEPS:

1. Set up C#/.NET project:
- Create Project folder:  DatingApp
- Need a solution file: dotnet new sln
- ASP.NET Core Web API dotnet new webapi: dotnet new webapi -n API
- Add API project to solution file:  dotnet sln add API/
2. Create first Entity (Entities/AppUser.cs)
3. Add EFC to our project (Nuget Package).
4. Create a DbContext class. (Data/DataContext.cs)
5. Tell Program.cs about DbContext class (add service)
6. Create Connection String (appsettings.development.json)
7. Run first migration dotnet ef migrations add InitialCreate -o Data/Migrations (creates migrations folder)
8. Create Database. (dotnet ef database update) EFC will use SQL to create database (datingapp.db file)
9. Add a few users to the database, Right Click on Users Table in SQLite Explorer to INSERT.
10. Create API Controller to Query an Endpoint (Controllers/UsersController.cs)
11. Make the code asyncronous.

WALKING SKELETON FOR BACKEND IS COMPLETE!!!!

FRONTEND SETUP STEPS:

1. Install, or update Angular globally: npm install @angular/cli@16 
2. To start the app cd into client directory: ng serve
3. app.component.html, app.component.ts, corresponding css file
4. Add extention Angular Language service
5. Make HTTP request from our Angular client to the controller of our API
- go to app.module.ts. We need to add HttpClientModule to NgModule Imports and import it from angular at the top
- go to app.component.ts. Inject HttpClient in AppComponent class via a constructor placed beneath class properties. Add new property to assign data from API to.
6. Add Cors to the API, Program.cs... two lines of code
7. Display in the browser
8. Add styling, install NGX-BOOTSTRAP (BOOTSTRAP FOR ANGULAR)

WALKING SKELETON FOR FRONTEND IS COMPLETE!!!!

TO RUN OVER HTTPS:

1. Need to generate a certificate for our client side application in order to run over HTTPS
2. Need to install utility, which creates a new local certificate authority on my computer: brew install mkcert
3. In DatingApp/client mkdir ssl
4. cd ssl
5. Run command to install a root local certificate authority: mkcert -install 
6. Run: mkcert localhost, which gives us a key file and a certificate file
7. Make change to angular.json and add options to serve. 
"serve": {
          "options": {
            "ssl": true,
            "sslCert": "./ssl/localhost.pem",
            "sslKey": "./ssl/localhost-key.pem"
          },
          ...}
8. Make change to Cors Policy app.useCors(...) in Program.cs to take https, not http 



/////////////////////////////////////////////////////////////////////////
NOTES FROM UDEMY:

4:12
2. Building a walking skeleton Part One - API
11. Introduction to Entity Framework
EF Features: Querying, Change Tracking, Saving, Concurrency, Transactions, Caching, Built-In Conventions, configurations, Migrations (allows us to create a database schema to automatically generate our database). Code first = EF creates our database for us using migrations.

1:49
2. Building a walking skeleton Part One - API
11. Introduction to Entity Framework
When we add Entity Framework, we need to create a class that derives from the DbContext class that we get with EF. This class acts as a bridge between our domain (entity classes) and the database. This is what we use to interact with our database. EF allows us to write Link Queries (DbContext.Users.Add(new User {Id = 4, Name = John}). EF works with database providers. (SQLite, which gives us a file for the database and translates our Link Query into a SQL command). SQLite Provider turns DbContext code into INSERT INTO Users(Id, Name) Values(4, John)).

0:45
2. Building a walking skeleton Part One - API
11. Introduction to Entity Framework
Entity Framework is an object relational mapper. Translates code into SQL commands that update our tables in the database. Prior to .NET Core 3.5 you wrote ADO.NET code to save, or retrieve application data from a database. ECF, automates the database activities for our application.

0:10
2. Building a walking skeleton Part One - API
5. Introduction
Walking skeleton:  A tiny implementation of the system that performs a small end-to-end function. It doesn't need the final architecture, but it should link together the main architectural components.
